# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on: push
#on:
#  push:
#    tags:
#      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Select Python version
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
        
      - name: Download FFmpeg
        uses: suisei-cn/actions-download-file@v1
        id: downloadfile  # Remember to give an ID if you need the output
        with:
          url: "https://github.com/ShareX/FFmpeg/releases/download/v4.3.1/ffmpeg-4.3.1-win64.zip"
          target: .

      - name: Unzip FFmpeg
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq ffmpeg-4.3.1-win64.zip -d .

      - name: PyInstaller Windows
        #run: |
        #  docker run --entrypoint /bin/sh --rm -v $GITHUB_WORKSPACE:/src cdrx/pyinstaller-windows:latest -c "python -m pip install --upgrade pip && /entrypoint.sh"
        uses: JackMcKew/pyinstaller-action-windows@main
          with:
            path: .
            spec: "ntscQT.spec"

      - uses: actions/upload-artifact@v3
        with:
          name: ntscQT
          path: dist/windows/ntscQTplus.exe
          retention-days: 2

#      - name: release
#        uses: actions/create-release@v1
#        id: create_release
#        with:
#          draft: false
#          prerelease: false
#          release_name: ${{ github.ref }}
#          tag_name: ${{ github.ref }}
#          body_path: CHANGELOG.md
#        env:
#          GITHUB_TOKEN: ${{ github.token }}

#      - name: upload Windows artifact
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./main.exe
#          asset_name: main.exe
#          asset_content_type: application/octet-stream